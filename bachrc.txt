# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
alias rm='rm -i'
#PS1='[\u@\h \w]\$ '
#diamond =$'\uE0B0'
BRPT=$(echo -e "\uE0B0")
LLTR=$(echo -e "\u25E2")
################PS1="\e[0;34m\e[47m \u@\h \e[m\e[0;37m\e[44m${BRPT}\e[m\e[1;31m\e[44m \w \e[m\e[0;34m${BRPT}\e[m $ "

export PATH=$PATH':/usr/bin/my_scripts' 

# Quick directory navigation
function up() { cd $(printf "%0.0s../" $(seq 1 ${1:-1})); }

# Create and cd into a directory
function mkcd() { mkdir -p "$1" && cd "$1"; }

# Enhanced directory listings
alias ll='ls -alF'
alias la='ls -A'

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=200000


# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

source ~/gitPrompt/git-prompt.sh
source ~/gitPrompt/git-completion.bash

export GIT_PS1_SHOWCOLORHINTS=true
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWCOLORHINTS="true"

 _prompt_config=(
   "_prompt_seg_command_state 8 0"
   "_prompt_seg_hostname $_prompt_hostname_color 15"
   "_prompt_seg_dir 12 10"
   "_prompt_seg_git 5 7"
 )
# Set POWERLINE_FONT=1 to enable, otherwise defaults to a basic prompt
POWERLINE_FONT=1

_prompt_hostname="$(perl -pe 's/\..+$//' <<<"$HOSTNAME")"
_prompt_rainbow_pause=""

if [ -e ~/.bash/git-prompt.sh ]
  then source ~/.bash/git-prompt.sh
fi 

function _prompt_set_arrow_char {
  if [[ $POWERLINE_FONT ]]; then
    __prompt_arrow_char=""
  else
    __prompt_arrow_char="▚"
  fi
}
_prompt_set_arrow_char

if [[ -z $_prompt_rainbow ]]; then
  _prompt_rainbow=( 154 154 154 184 184 214 214 208 208 202 203 203 198 198 199 163 164 128 128 93 93 57 63 63 33 33 39 39 45 44 44 49 49 48 84 83 119 118 154 154 190 184 )
fi
if [[ -z $_prompt_rainbow_index ]]; then
  _prompt_rainbow_index=$(( RANDOM % (${#_prompt_rainbow[@]}-1) ))
fi
function _prompt_rainbow_inc_index {
  [[ -z $_prompt_rainbow_pause ]] && _prompt_rainbow_index=$((_prompt_rainbow_index + 1))
  if [[ $_prompt_rainbow_index -gt $((${#_prompt_rainbow[@]}-1)) ]]; then
    _prompt_rainbow_index=0
  fi

  [[ -n $1 ]] && eval "$1=${_prompt_rainbow[$_prompt_rainbow_index]}"
}

function _prompt_hostname_random_color {
  _prompt_hostname_color="$(( ( RANDOM % 203 ) + 17 ))"
}
if [[ -z $_prompt_hostname_color ]]; then
  _prompt_hostname_random_color
fi

# rxvt specific code to properly set the window title
if [[ $TERM =~ rxvt.* ]]; then
  # shellcheck disable=SC2016
  _prompt_rxvt_trap_cmd=' _prompt_rxvt_set_title "$BASH_COMMAND"'
else
  _prompt_rxvt_trap_cmd=''
fi

function _prompt_seg_command_state {
  local _last_status=$2
  local _res=""
  if [[ $_previous_command != "_prompt_command" ]]; then
    case $_last_status in
      0 )
        _res='\[\e[38;5;34m\]'" ✔ \u "
        ;;
      * )
        _res='\[\e[38;5;160m\]'" ✘ \u "
        ;;
    esac
  else
    _res="   "
  fi

  eval "$1='$_res'"
}

function _prompt_seg_dir {
  eval "$1=' \w '"
}

function _prompt_seg_git {
  # shellcheck disable=SC2155
  local _git_prompt=$(__git_ps1)
  local _res=""

  if [[ -n "$_git_prompt" ]]; then
    # Strip leading space and parenthesis
    _git_prompt="${_git_prompt:2:$((${#_git_prompt} - 3))}"
    # Strip potential single quotes
    _git_prompt="${_git_prompt//\'/}"
    _res="  $_git_prompt "
  fi

  eval "$1='$_res'"
}

function _prompt_seg_hostname {
  local _res=""
  if [[ -n $SSH_CLIENT ]]; then
    _res=" $_prompt_hostname "
  fi

  eval "$1='$_res'"
}

function _prompt_seg_virtualenv {
  # Get Virtual Env
  local _res=""
  if [[ $VIRTUAL_ENV != "" ]]
  then
    # Strip out the path and just leave the env name
    _res=" ${VIRTUAL_ENV##*/}"
  else
    # Not activated
    _res=''
  fi

  eval "$1='$_res'"
}


_previous_command=""
_cur_command=""
function _prompt_command {
  # Stash the status before we clobber it
  local _last_status=$?
  _prompt_set_arrow_char
  local __arrow_char=$__prompt_arrow_char

  local _rc
  _prompt_rainbow_inc_index _rc

  PS1='\[\e[38;5;'"$_rc"'m\]'
  local seg
  local _seg
  local _seg_text=""
  for i in "${!_prompt_config[@]}"; do
    seg="${_prompt_config[$i]}"
    _seg=( $seg  )
    "${_seg[0]}" _seg_text $_last_status
    if [[ -n $_seg_text ]]; then
      PS1+='\[\e[48;5;'"${_seg[1]}"'m\]'"$__arrow_char"
      PS1+='\[\e[38;5;'"${_seg[2]}"'m\]'"$_seg_text"
      PS1+='\[\e[38;5;'"${_seg[1]}"'m\]'
    fi

    _prompt_config[$i]="$seg"
    _seg_text=""
  done

  PS1+='\[\e[49m\]'"$__arrow_char"'\[\e[0m\] '

  # Reset status
  (exit $_last_status)
}

function _prompt_rxvt_set_title {
  if [[ $1 == "_prompt_command" ]]; then
    printf '\e]0;%s\007' "urxvt - $(basename "$(pwd)")"
  else
    printf '\e]0;%s\007' "$1"
  fi
}

# Trap commands to display status and title
#   Only do this for login shells on the local machine
if [[ -z $SSH_CLIENT ]] && shopt -q login_shell; then
  trap '_previous_command=$_cur_command; _cur_command=$BASH_COMMAND;'"$_prompt_rxvt_trap_cmd" DEBUG
else
  trap '_previous_command=$_cur_command; _cur_command=$BASH_COMMAND;' DEBUG
fi

# Set a default config
# shellcheck disable=SC2128
if [[ -z $_prompt_config ]]; then
  _prompt_config=(
    "_prompt_seg_command_state 8 0"
    "_prompt_seg_hostname $_prompt_hostname_color 15"
    "_prompt_seg_dir 12 8"
    "_prompt_seg_virtualenv 99 7"
    "_prompt_seg_git 5 7"
  )
fi

PROMPT_COMMAND="_prompt_command"


. "$HOME/.cargo/env"


export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
